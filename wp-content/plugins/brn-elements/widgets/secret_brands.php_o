<?


namespace secretElements\Widgets;

use Elementor\Widget_Base;
use Elementor\Controls_Manager;

// Security Note: Blocks direct access to the plugin PHP files.
defined( 'ABSPATH' ) || die();

/**
 * Zoa blog posts widget.
 *
 * Zoa widget that displays blog posts.
 *
 * @since 1.0.0
 */
class secret_brands extends Widget_Base {
	/**
	 * Get widget name.
	 *
	 * Retrieve blog posts widget name.
	 *
	 * @since 1.0.0
	 * @access public
	 *
	 * @return string Widget name.
	 */
	public function get_name() {
		return 'secret-brands';
	}

	/**
	 * Get widget title.
	 *
	 * Retrieve blog posts widget title.
	 *
	 * @since 1.0.0
	 * @access public
	 *
	 * @return string Widget title.
	 */
	public function get_title() {
		return esc_html__( 'secret brands', 'general' );
	}

	/**
	 * Get widget icon.
	 *
	 * Retrieve blog posts widget icon.
	 *
	 * @since 1.0.0
	 * @access public
	 *
	 * @return string Widget icon.
	 */
	public function get_icon() {
		return 'fa fa-pencil';
	}

	/**
	 * Get widget categories.
	 *
	 * Retrieve the list of categories the icon widget belongs to.
	 *
	 * Used to determine where to display the widget in the editor.
	 *
	 * @since 1.0.0
	 * @access public
	 *
	 * @return array Widget categories.
	 */
	public function get_categories() {
		return [ 'wordpress' ];
	}

    private function secret_get_narrow_data( $type = 'post', $terms = 'category' ) {
        /* $type  = `post` || `term`
        *  $terms = post_type || taxonomy | ex: post, category, product, product_cat, custom_post_type...
        */

        $output = array();
        switch ( $type ):
            case 'post':
                $tour_args = array(
                    'post_type'           => $terms,
                    'post_status'         => 'publish',
                    'ignore_sticky_posts' => 1,
                    'posts_per_page'      => - 1,
                );
                $qr        = new WP_Query( $tour_args );
                $output    = wp_list_pluck( $qr->posts, 'post_title', 'ID' );
                break;

            case 'term':
                $terms  = get_terms( $terms );
                $output = wp_list_pluck( $terms, 'name', 'term_id' );
                break;
        endswitch;

        return $output;
    }
        
	/**
	 * Register blog posts widget controls.
	 *
	 * Add different input fields to allow the user to change and customize the widget settings
	 *
	 * @since 1.0.0
	 * @access protected
	 */
	protected function _register_controls() {
		parent::_register_controls();

		$this->register_layout_section_controls();
		$this->register_query_section_controls();
	}

	protected function register_layout_section_controls() {
		$this->start_controls_section(
			'section_layout',
			[
				'label' => esc_html__( 'Layout', 'secret_elements' ),
			]
		);
       
		$this->add_control(
			'layout',
			[
				'label'   => esc_html__( 'Layout', 'secret_elements' ),
				'type'    => Controls_Manager::SELECT,
				'options' => [
					'gallery' => esc_html__( 'Gallery', 'secret_elements' ),
					'slider' => esc_html__( 'Slider', 'secret_elements' )
				],
				'default' => 'horizonal',
			]
		);
        
		$this->add_control(
			'items_to_show',
			[
				'label'   => esc_html__( 'Items To Show', 'secret_elements' ),
				'type'    => Controls_Manager::NUMBER,
				'default' => 5,
				'condition' => [
					'layout' => 'slider'
				]
			]
		);
		
		$this->end_controls_section();
	}

	protected function register_query_section_controls() {
		$this->start_controls_section(
			'section_query',
			[
				'label' => esc_html__( 'Query', 'wordpress' ),
			]
		);

		$this->add_control(
			'limit',
			[
				'label'   => esc_html__( 'Limit', 'wordpress' ),
				'type'    => Controls_Manager::NUMBER,
				'default' => 6,
			]
		);
		
		$this->add_control(
			'offset',
			[
				'label'   => esc_html__( 'Offset', 'secret_elements' ),
				'type'    => Controls_Manager::NUMBER,
				'default' => 0
			]
		);

		$this->add_control(
			'order',
			[
				'label'   => esc_html__( 'Order', 'wordpress' ),
				'type'    => Controls_Manager::SELECT,
				'default' => 'desc',
				'options' => [
					'asc'  => esc_html__( 'ASC', 'wordpress' ),
					'desc' => esc_html__( 'DESC', 'wordpress' ),
				],
			]
		);

		$this->end_controls_section();
	}
	
	
	protected function render() {
		
		wp_enqueue_style("secret_brands_style",BRN_ELEMENTS_URL."widgets/css/secret_brands.css");
		
		wp_enqueue_script("swiper",BRN_ELEMENTS_URL."widgets/libraries/swiper/swiper.min.js",['jquery']);
		
		wp_enqueue_script("secret_brands_script",BRN_ELEMENTS_URL."widgets/js/secret_brands.js",['swiper']);
		
		$rand_id = time()."_".rand(111,999);
			
		$settings = $this->get_settings_for_display();
		
		$brands = get_terms( array(
			'taxonomy' => 'product_brand',
			'hide_empty' => false,
			'number' => $settings['limit'],
			'offset' => $settings['offset'],
			'order' => strtoupper($settings['order']),
			'meta_query' => array(
				array(
					'key' => 'in_homepage',
					'value' => '1',
					'compare' => '='
				)
			)
		));
		
		$is_slider = $settings['layout'] == 'slider';
		
		
		
		?>
        
		<div class="brands_con <?=$is_slider ? "swiper-container" : ""?>" id="brands_con_<?=$rand_id?>">
        	<?= $is_slider ? '<div class="swiper-wrapper">' : ''; ?>
        
        	<? foreach ($brands as $brand): ?>
            <a href="/brand/<?=$brand->slug?>/" class="brand_con <?=$is_slider ? "swiper-slide" : "" ?>">
            	<?
					$brand->fields = get_fields("product_brand_".$brand->term_id);
					$img = !isset($brand->fields['homepage_image']) || empty($brand->fields['homepage_image']) ? wp_get_attachment_url( get_woocommerce_term_meta($brand->term_id, 'thumbnail_id', true) ) : $brand->fields['homepage_image'];          
				?>
                <img class="brnad_img" src="<?=$img?>" />
                <div class="brand_content">
                	<h4><?=$brand->name?></h4>
                    <h5><?=$brand->fields['subtitle']?></h5>
                </div>
                
            </a>
            <? endforeach; ?>
            
            <? if ($is_slider): ?>
            </div>
            <div class="swiper-button-prev"></div>
			  <div class="swiper-button-next"></div>
            <? endif; ?>
            
        </div>
        
        <? if ($is_slider): ?>
        <script>
		jQuery(document).ready(function(e) {
            const swiper = new Swiper('#brands_con_<?=$rand_id?>', {
              speed: 1000,
			  effect: 'slide',
              spaceBetween: 25,
			  centeredSlides: true,
			  loop: true,
			  slidesPerView : 5,
			  slidesPerGroup : 1,
			  autoplay : {
				  delay: 500,
				  pauseOnMouseEnter : true,
				  
			  },
			  navigation: {
				nextEl: '.swiper-button-prev',
				prevEl: '.swiper-button-next',
			  },
			  breakpoints: {
				767: {
				   slidesPerView: 1.5,
      			   spaceBetween: 20,
				},
				1024: {
				   slidesPerView: 3,
      			   spaceBetween: 24,
				}
			  }
			  
            });
        });
		</script>
        <? endif; ?>
        
		<?php	
                
	}
}


\Elementor\Plugin::instance()->widgets_manager->register_widget_type( new secret_brands() );





